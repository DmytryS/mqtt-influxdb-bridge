{"version":3,"sources":["../../src/bridge.js"],"names":["Bridge","constructor","_logger","logger","getLogger","_mqttClient","mqtt","connect","process","env","BROKER_ADR","on","_onMqttError","bind","_onConnectBroker","_onDisconnectBroker","_influx","InfluxDB","DB_ADR","_checkIfDbExists","subscribe","_saveToDB","disconnect","end","info","topic","message","location","device","measurement","split","messageString","toString","fields","Number","isNaN","string","value","parseFloat","writePoints","tags","database","DB","precision","error","databaseNames","getDatabaseNames","includes","createDatabase"],"mappings":"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","sourcesContent":["import mqtt from 'mqtt';\nimport { InfluxDB } from 'influx';\nimport { logger } from './lib';\n\nexport default class Bridge {\n  constructor() {\n    this._logger = logger.getLogger('Bridge');\n    this._mqttClient = mqtt.connect(process.env.BROKER_ADR);\n    this._mqttClient.on('error', this._onMqttError.bind(this));\n    this._mqttClient.on('connect', this._onConnectBroker.bind(this));\n    this._mqttClient.on('close', this._onDisconnectBroker.bind(this));\n\n    this._influx = new InfluxDB(process.env.DB_ADR);\n  }\n\n  async connect() {\n    await this._checkIfDbExists();\n\n    this._mqttClient.subscribe('#', this._onMqttError.bind(this));\n    this._mqttClient.on('message', this._saveToDB.bind(this));\n  }\n\n  async disconnect() {\n    await this._mqttClient.end();\n    this._influx = false;\n  }\n\n  _onConnectBroker() {\n    this._logger.info(`Connected to mqtt broker: ${process.env.BROKER_ADR}`);\n  }\n\n  _onDisconnectBroker() {\n    this._logger.info(\n      `Disconnected from mqtt broker: ${process.env.BROKER_ADR}`,\n    );\n  }\n\n  _saveToDB(topic, message) {\n    try {\n      const [location, device, measurement] = topic.split('/');\n      const messageString = message.toString();\n      const fields = {};\n\n      if (Number.isNaN(messageString)) {\n        fields.string = messageString;\n      } else {\n        fields.value = parseFloat(messageString);\n      }\n\n      this._influx.writePoints(\n        [\n          {\n            measurement,\n            tags: {\n              location,\n              device,\n            },\n            fields,\n          },\n        ],\n        {\n          database: process.env.DB,\n          precision: 's',\n        },\n      );\n    } catch (error) {\n      this._logger.error('An error occured during saving data to DB', error);\n    }\n  }\n\n  _onMqttError(error) {\n    if (error) {\n      this._logger.error('MQTT error:', error);\n    }\n  }\n\n  async _checkIfDbExists() {\n    const databaseNames = await this._influx.getDatabaseNames();\n\n    if (!databaseNames.includes(process.env.DB)) {\n      this._logger.info(`Creating InfluxDb database ${process.env.DB}`);\n\n      return this._influx.createDatabase(process.env.DB);\n    }\n\n    return true;\n  }\n}\n"],"file":"bridge.js"}